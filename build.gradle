group 'org.agilemicroservices.platform'
version '1.0-SNAPSHOT'

apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'java'

sourceCompatibility = 1.8


buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.1.RELEASE")
        classpath group: 'com.layer', name: 'gradle-git-repo-plugin', version: '2.0.2'
    }
}

ext {
    groovyVersion = '2.3.11'
    junitVersion = '4.12'
    springVersion = '4.2.4.RELEASE'
    springBootVersion = '1.3.1.RELEASE'
    activeMqVersion = '5.13.0'
    camelVersion = '2.16.1'
    hibernateVersion = '5.0.7.Final'
}


subprojects {
    group 'org.agilemicroservices.platform'
    version '1.0-SNAPSHOT'

    apply plugin: 'idea'
    apply plugin: 'groovy'
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'git-repo'
    apply plugin: 'signing'

    sourceCompatibility = 1.8

    ext {
        pomFilePath = "${project.projectDir}/build/publications/jar/pom-default.xml"
        pomFile = file(pomFilePath)

        gitPublishConfig {
            org = "agilemicroservices"
            repo = "maven-repo"
            gitUrl = 'https://agilemicroservices@github.com/agilemicroservices/maven-repo.git'
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    task sourceJar(type: Jar, dependsOn: classes) {
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        from javadoc.destinationDir
    }

    configurations {
        pom
        all*.exclude group: 'xml-apis', module: 'xml-apis'
    }

    artifacts {
        archives jar
        archives sourceJar
        archives javadocJar
        if (pomFile.exists()) {
            pom pomFile
        }
    }

    task signPom (type: Sign) {
        sign configurations.pom
    }

    def getPomSignature = {
        return project.tasks.signPom.signatureFiles.collect{it}[0]
    }

    task signJars (type : Sign, dependsOn: [jar, javadocJar, sourceJar]) {
        sign configurations.archives
    }

    if (project.ext.pomFile.exists()) {
        task preparePublication (dependsOn : [signJars, signPom])
    } else {
        task preparePublication(dependsOn: signJars)
    }

    def getSignatureFiles = {
        def allFiles = project.tasks.signJars.signatureFiles.collect { it }
        def signedSources = allFiles.find { it.name.contains('-sources') }
        def signedJavadoc = allFiles.find { it.name.contains('-javadoc') }
        def signedJar = (allFiles - [signedSources, signedJavadoc])[0]
        return [
                [archive: signedSources, classifier: 'sources', extension: 'jar.asc'],
                [archive: signedJavadoc, classifier: 'javadoc', extension: 'jar.asc'],
                [archive: signedJar,     classifier: null,      extension: 'jar.asc']
        ]
    }

    publishing {
        repositories {
            maven {
                url "file://${gitPublishConfig.home}/${gitPublishConfig.org}/${gitPublishConfig.repo}/releases"
            }
        }

        publications {

            jar(MavenPublication) {
                from components.java
                pom.withXml {
                    asNode().appendNode('description', 'Agilemicroservices platform libraries.')
                    asNode().appendNode('name', rootProject.name)
                    asNode().appendNode('url', 'https://github.com/agilemicroservices/agilemicroservices-platform')
                    asNode().appendNode('licenses')
                            .appendNode('license')
                            .appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                    asNode().appendNode('scm')
                            .appendNode('url', 'https://github.com/agilemicroservices/agilemicroservices-platform')
                    asNode().appendNode('developers')
                            .appendNode('developer')
                            .appendNode('id', 'agilemicroservices')

                    if (!project.ext.pomFile.exists()) {
                        writeTo (project.ext.pomFile)
                    }
                }

                artifact sourceJar {
                    classifier 'sources'
                }

                artifact javadocJar {
                    classifier 'javadoc'
                }
            }

            gpgJars (MavenPublication) {
                // give signature files to artifact method
                getSignatureFiles().each {signature ->
                    if (signature.archive.exists()) {
                        artifact(signature.archive) {
                            classifier = signature.classifier
                            extension = signature.extension
                        }
                    }
                }
            }

            if (project.ext.pomFile.exists()) {
                def signatureArchive = getPomSignature()
                if (signatureArchive.exists()) {
                    gpgPom(MavenPublication) {
                        artifact(signatureArchive) {
                            classifier = null
                            extension = 'pom.asc'
                        }
                    }
                }
            }
        }
    }
}


task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}